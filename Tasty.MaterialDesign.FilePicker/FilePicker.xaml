<Grid x:Class="Tasty.MaterialDesign.FilePicker.FilePicker"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:Tasty.MaterialDesign.FilePicker"
      xmlns:material="http://materialdesigninxaml.net/winfx/xaml/themes"
      xmlns:vm="clr-namespace:Tasty.MaterialDesign.FilePicker.ViewModel"
      xmlns:core="clr-namespace:Tasty.MaterialDesign.FilePicker.Core"
      xmlns:converter="clr-namespace:Tasty.MaterialDesign.FilePicker.Converter"
      xmlns:validation="clr-namespace:Tasty.MaterialDesign.FilePicker.Validation"
      mc:Ignorable="d" x:Name="filePicker"
      d:DesignHeight="450" d:DesignWidth="800">
    <Grid.DataContext>
        <vm:FilePickerViewModel/>
    </Grid.DataContext>
    <Grid.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Tasty.MaterialDesign.FilePicker;component/Resources/Icons.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <converter:StringLimitConverter x:Key="StringLimit"/>
            <converter:IntToVisibilityConverter x:Key="IntToVisibility"/>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibility"/>
            <converter:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibility"/>
            <converter:IconTypeToGeometryConverter x:Key="IconTypeToGeometryConverter"/>

            <SolidColorBrush x:Key="WarnColor" Color="#FFBD4646" Opacity=".85"/>

            <core:FolderTreeTemplateSelector x:Key="displaySelector" >
                <core:FolderTreeTemplateSelector.LoadedDirectoryTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type core:FolderEntry}"
                                  ItemsSource="{Binding SubDirectories}">
                        <StackPanel Orientation="Horizontal">
                            <material:PackIcon Kind="Lock" Margin="0,0,8,0" Foreground="{DynamicResource WarnColor}"
                                               Visibility="{Binding IsLocked, Converter={StaticResource BooleanToVisibility}}"/>
                            <TextBlock Text="{Binding Name}"/>
                        </StackPanel>
                    </HierarchicalDataTemplate>
                </core:FolderTreeTemplateSelector.LoadedDirectoryTemplate>
                <core:FolderTreeTemplateSelector.UnloadedDirectoryTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type core:UnloadedFolderEntry}"
                                  ItemsSource="{Binding UnloadedSubDirectories}">
                        <StackPanel Orientation="Horizontal">
                            <material:PackIcon Kind="Lock" Margin="0,0,8,0" Foreground="{DynamicResource WarnColor}"
                                               Visibility="{Binding IsLocked, Converter={StaticResource BooleanToVisibility}}"/>
                            <TextBlock Text="{Binding Name}"/>
                        </StackPanel>
                    </HierarchicalDataTemplate>
                </core:FolderTreeTemplateSelector.UnloadedDirectoryTemplate>
            </core:FolderTreeTemplateSelector>
        </ResourceDictionary>
    </Grid.Resources>
    <material:DialogHost DialogTheme="Inherit">
        <material:DialogHost.DialogContent>
            <StackPanel Margin="16" x:Name="dialog_accessDenied">
                <TextBlock Text="{DynamicResource title_accessDenied}"
                           Style="{DynamicResource MaterialDesignHeadline6TextBlock}" 
                           Foreground="{DynamicResource MaterialDesignDarkForeground}" />
                <TextBlock Margin="0,16,0,0" HorizontalAlignment="Stretch" MinHeight="60"
                           MaxWidth="340"
                           TextWrapping="Wrap"
                         Text="{DynamicResource message_accessDenied}"/>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                    <Button Style="{StaticResource MaterialDesignRaisedAccentButton}" IsDefault="True" Margin="0 8 8 0" 
                            Content="{DynamicResource close}"
                            Command="{x:Static material:DialogHost.CloseDialogCommand}">
                        <Button.CommandParameter>
                            <system:Boolean xmlns:system="clr-namespace:System;assembly=mscorlib">
                                True
                            </system:Boolean>
                        </Button.CommandParameter>
                    </Button>
                </StackPanel>
            </StackPanel>
        </material:DialogHost.DialogContent>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="25"/>
            </Grid.RowDefinitions>
            <Grid Margin="16">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="250" MinWidth="140"/>
                    <ColumnDefinition Width="5"/>
                    <ColumnDefinition MinWidth="150"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="27"/>
                    <RowDefinition Height="8"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <TextBlock Text="{Binding Title, ElementName=filePicker}" 
                           Style="{DynamicResource MaterialDesignHeadline6TextBlock}" 
                           Foreground="{DynamicResource MaterialDesignDarkForeground}"
                           Grid.ColumnSpan="3" VerticalAlignment="Center"/>

                <DockPanel Grid.Row="2">
                    <ComboBox ItemsSource="{Binding DefaultDestinations, UpdateSourceTrigger=PropertyChanged}" 
                              SelectedItem="{Binding SelectedDestination}" DockPanel.Dock="Top"
                              material:HintAssist.Hint="Destinations" Margin="4,0,4,8"
                              Foreground="{DynamicResource MaterialDesignDarkForeground}" />
                    <Button Content="Refresh" DockPanel.Dock="Bottom" Margin="0,8,8,0" Click="Refresh_Click"/>

                    <TreeView x:Name="tree" ItemsSource="{Binding RootFolders}" 
                              TreeViewItem.Expanded="TreeViewItem_Expanded"
                              TreeViewItem.Collapsed="TreeViewItem_Collapsed"
                              TreeViewItem.Selected="TreeViewItem_Selected"
                              ItemTemplateSelector="{DynamicResource displaySelector}">
                        <TreeView.ItemContainerStyle>
                            <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                                <Setter Property="IsExpanded" Value="{Binding IsExpanded}"/>
                                <Setter Property="IsSelected" Value="{Binding IsSelected}"/>
                                <EventSetter Event="PreviewMouseLeftButtonDown" Handler="RootFolderItem_MouseLeftButtonDown"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsLocked}" Value="True">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TreeView.ItemContainerStyle>
                    </TreeView>
                </DockPanel>

                <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" Grid.Row="2"/>

                <DockPanel Grid.Column="2" Grid.Row="2">
                    <DockPanel DockPanel.Dock="Top" Margin="8,0,0,8">
                        <ComboBox DockPanel.Dock="Right" Margin="8,0,0,0"
                                  Foreground="{DynamicResource MaterialDesignDarkForeground}"
                                  material:HintAssist.Hint="{DynamicResource picker_displaySelectorHint}" 
                                  SelectedIndex="{Binding DisplayOption}">
                            <ComboBoxItem Content="{DynamicResource picker_displayDetails}"/>
                            <ComboBoxItem Content="{DynamicResource picker_displaySymbols}"/>
                        </ComboBox>

                        <Button Padding="0" Margin="0,0,8,0" ToolTip="" Click="StepUpHierarchy_Click"
                                Height="24" Width="24" Foreground="{DynamicResource MaterialDesignToolTipBackground}">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                    <Setter Property="Background" Value="{x:Null}"/>
                                    <Setter Property="BorderBrush" Value="{x:Null}"/>
                                    <Setter Property="IsEnabled" Value="True"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsRoot}" Value="True">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                            <material:PackIcon Kind="ArrowUp" Width="24" Height="24"/>
                        </Button>
                        <TextBox VerticalAlignment="Center" TextChanged="CurrentDirectory_TextChanged" 
                                 material:HintAssist.Hint="{DynamicResource hint_selectedFolder}"
                                 Foreground="{DynamicResource MaterialDesignDarkForeground}">
                            <TextBox.Text>
                                <Binding Mode="TwoWay" Path="CurrentPath" UpdateSourceTrigger="PropertyChanged">
                                    <Binding.ValidationRules>
                                        <validation:PathValidationRule ValidatesOnTargetUpdated="True" />
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                    </DockPanel>
                    <DockPanel DockPanel.Dock="Bottom" Margin="8,0,0,0">
                        <Button x:Name="btn_abort" Content="{DynamicResource abort}" Margin="8,8,0,0"
                                DockPanel.Dock="Right" Click="Abort_Click">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFlatButton}">
                                    <Setter Property="Command" Value="material:DialogHost.CloseDialogCommand"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SuppressCloseCommand, ElementName=filePicker}" Value="True">
                                            <Setter Property="Command" Value=""/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                        <Button x:Name="btn_ok" Content="{DynamicResource ok}" Margin="8,8,0,0"
                                IsEnabled="{Binding IsSelectEnabled}" DockPanel.Dock="Right"
                                Click="Select_Click">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFlatButton}">
                                    <Setter Property="Command" Value="material:DialogHost.CloseDialogCommand"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SuppressCloseCommand, ElementName=filePicker}" Value="True">
                                            <Setter Property="Command" Value=""/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                        <TextBox DockPanel.Dock="Bottom"
                                 material:HintAssist.Hint="{DynamicResource hint_selectedFile}" IsReadOnly="True"
                                 Text="{Binding SelectedEntry.Name, Mode=OneWay}"
                                 Foreground="{DynamicResource MaterialDesignDarkForeground}">
                            <TextBox.Style>
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignFloatingHintTextBox}">
                                    <Setter Property="material:HintAssist.Hint" Value="{DynamicResource hint_selectedFile}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsFolderSelect}" Value="True">
                                            <Setter Property="material:HintAssist.Hint" Value="{DynamicResource hint_selectedFolder}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                            <!--<TextBox.Text>
                    <Binding
                        Path="SelectedEntry">
                        <Binding.ValidationRules>
                            <validation:PathValidationRule ValidatesOnTargetUpdated="True"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>-->
                        </TextBox>
                    </DockPanel>
                    <Grid>
                        <ListBox ItemsSource="{Binding FileList}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" Grid.IsSharedSizeScope="True" SelectedIndex="{Binding SelectedIndex}"
                     PreviewMouseDoubleClick="FileView_Symbols_PreviewMouseDoubleClick" x:Name="fileViewSymbols" Visibility="{Binding DisplayOption, Converter={StaticResource IntToVisibility}, ConverterParameter=1, FallbackValue=Collapsed}"
                     SelectedItem="{Binding SelectedEntry}">
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsLocked}" Value="True">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ListBox.ItemContainerStyle>
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Grid.ToolTip>
                                            <StackPanel>
                                                <TextBlock Text="{Binding Name}" Margin="0,0,8,0"/>
                                                <Image MaxWidth="500" MaxHeight="300" Source="{Binding Preview}" Visibility="{Binding IsImage, Converter={StaticResource BooleanToVisibility}}"/>
                                            </StackPanel>
                                        </Grid.ToolTip>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="64"/>
                                            <RowDefinition Height="4"/>
                                            <RowDefinition SharedSizeGroup="A"/>
                                        </Grid.RowDefinitions>
                                        <Path Data="{Binding Icon, Converter={StaticResource IconTypeToGeometryConverter}}" Width="64" Height="64" 
                                              DockPanel.Dock="Top" Fill="{StaticResource MaterialDesignDarkForeground}" Stretch="Uniform"
                                              Visibility="{Binding IsImage, Converter={StaticResource InverseBooleanToVisibility}}"/>
                                        <Image Source="{Binding Preview}" Width="64" Height="64"
                                               Visibility="{Binding IsImage, Converter={StaticResource BooleanToVisibility}}"/>
                                        <material:PackIcon Kind="Lock" Margin="0,0,8,0" Foreground="{DynamicResource WarnColor}"
                                               Visibility="{Binding IsLocked, Converter={StaticResource BooleanToVisibility}}"/>
                                        <TextBlock Text="{Binding Name, Converter={StaticResource StringLimit}, ConverterParameter=40}" Width="64" TextAlignment="Center" TextWrapping="Wrap" Grid.Row="2"/>
                                    </Grid>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel IsItemsHost="True" Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>
                        </ListBox>

                        <ListView x:Name="fileViewDetails" Visibility="{Binding DisplayOption, Converter={StaticResource IntToVisibility}, ConverterParameter=0}"
                                  ItemsSource="{Binding FileList}" PreviewMouseDoubleClick="FileView_Details_PreviewMouseDoubleClick" SelectedItem="{Binding SelectedEntry}"
                                  SelectedIndex="{Binding SelectedIndex}"
                                  HorizontalContentAlignment="Stretch">
                            <ListView.ItemContainerStyle>
                                <Style TargetType="ListViewItem" BasedOn="{StaticResource MaterialDesignGridViewItem}">
                                    <Setter Property="ToolTip">
                                        <Setter.Value>
                                            <StackPanel>
                                                <TextBlock Text="{Binding Name}" Margin="0,0,8,0"/>
                                                <Image Source="{Binding Preview}" MaxWidth="500" MaxHeight="300" Visibility="{Binding IsImage, Converter={StaticResource BooleanToVisibility}}"/>
                                            </StackPanel>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsLocked}" Value="True">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ListView.ItemContainerStyle>
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="{DynamicResource name}" Width="400">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <DockPanel Height="20" Background="Transparent">
                                                    <Path Data="{Binding Icon, Converter={StaticResource IconTypeToGeometryConverter}}" Margin="0,0,12,0" VerticalAlignment="Center"
                                                          Visibility="{Binding IsImage, Converter={StaticResource InverseBooleanToVisibility}}"
                                                          Fill="{StaticResource MaterialDesignDarkForeground}" Width="18" Height="18"
                                                          Stretch="Uniform"/>
                                                    <Image Source="{Binding Preview}" Width="30" Height="30" Margin="0,0,8,0" 
                                                           Visibility="{Binding IsImage, Converter={StaticResource BooleanToVisibility}}"
                                                           VerticalAlignment="Center"/>
                                                    <material:PackIcon Kind="Lock" Margin="0,0,8,0" VerticalAlignment="Center"
                                                                       Foreground="{DynamicResource WarnColor}"
                                                                       Visibility="{Binding IsLocked, Converter={StaticResource BooleanToVisibility}}"/>
                                                    <TextBlock Text="{Binding Name}" VerticalAlignment="Center"/>
                                                </DockPanel>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="{DynamicResource header_extension}" Width="120">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock>
                                                    <TextBlock.Style>
                                                        <Style>
                                                            <Setter Property="TextBlock.Text" Value=""/>
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding IsFile}" Value="True">
                                                                    <Setter Property="TextBlock.Text" Value="{Binding Extension}"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </DockPanel>
            </Grid>

            <Grid Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibility}, ElementName=filePicker, FallbackValue=Collapsed}">
                <Canvas Background="{DynamicResource MaterialDesignCheckBoxOff}"/>
                <material:Card Grid.Row="1" Grid.Column="1" Padding="8" VerticalAlignment="Center" HorizontalAlignment="Center">
                    <StackPanel>
                        <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}" Value="0" 
                         IsIndeterminate="True" Height="60" Width="60"/>
                        <TextBlock Text="Just a few moments..." TextAlignment="Center" Margin="0,8,0,0"
                           Style="{StaticResource MaterialDesignHeadline6TextBlock}"/>
                    </StackPanel>
                </material:Card>
            </Grid>
        </Grid>
    </material:DialogHost>
</Grid>
